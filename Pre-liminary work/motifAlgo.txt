Disclaimer: Refer to the problem statement in 'problemstatement.txt' file
BruteDP Solution:
There are O(n^4) pairs and we are checking all the pairs and findind the DFD for the pair
and finding the pair with minimum DFD and minimum length k.
We are using dynamic programming to store the previous DFD and avoid calculating DFD again 
and again.
In this algorithm, we first choose the starting points for both the subtrajectories and then 
start iterating over the ending points of both the subtrajectories and finding the dfd on the way.
Time Complexity: O(n^4)
Space Complexity: O(n^2) for memoization of DFD values ending at specific points

For Optimizing the algorithm, we consider the problem as path-finding algorithm
in Distance matrix by finding the path with non-decreasing points and the maximum
distance on the path being minimal out of all possible paths.
We need to find a non-decreasing path in the matrix starting at cell [startFirst,startSecond]
and ending at [endFirst, endSecond]

Optimization1: Cell-Based Lower Bound
For optimizing the algorithm, the writer is using pruning technique which is basically
rejecting cases where we can't find a valid pair by any means for a specific 'startFirst'
and 'startSecond' points. dfd(startFirst, endFirst, startSecond, endSecond) >= Distance(startFirst, startSecond)

Optimization2: Cross-based Lower Bound
Cross-Based Lower bound is finding the row minimum value that we must cross and the column minimum value in
row[startSecond+1] and column[startFirst+1], and taking the maxium of two values, that value will be a lower 
bound for the dfd of both the subtrajectories

Optimization3: Band-Based Lower Bound
Extending the Cross-based bounds for next 'k' rows, since the minimum length of subtrajectories 
is given to be 'k', hence the lower bound of dfd of both the subtrajectories would be 
maxium of all row minimum values and maximum of all column minium values. This would further prune
a lot of test cases

In order to implement these optimizations, the bounds are being relaxed a bit, since calculating
the exact bounds would elevate the time Complexity even further. 


